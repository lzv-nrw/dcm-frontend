"""
Miscellaneous View-class definition
"""

from typing import Callable, Any
import sys
import threading
from datetime import datetime

from flask import Blueprint, Response, request, jsonify
from flask_login import login_required
import requests
from dcm_common import services
from oai_pmh_extractor import RepositoryInterface

from dcm_frontend.decorators import requires_permission
from dcm_frontend.config import AppConfig
try:
    from dcm_frontend.build_info import BuildInfo
except ImportError:
    print(
        "\033[0;36mINFO\033[0m Unable to load 'build_info'-module. Using "
        + "placeholder-values instead. The file can be generated by running "
        + "the script 'app/generate_build_info.py'.",
        file=sys.stderr,
    )
    class BuildInfo:
        """Placeholder build-metadata."""
        BUILD_DATETIME = datetime.now()
        VERSION = "unavailable"


class MiscellaneousView(services.View):
    """View-class for miscellaneous data."""

    NAME = "misc"

    def __init__(self, config: AppConfig) -> None:
        super().__init__(config)
        self._welcome = self.config.WELCOME_MESSAGE_TEMPLATE.format(
            VERSION=BuildInfo.VERSION,
            BUILD_DATETIME=BuildInfo.BUILD_DATETIME,
        )
        self._cache_lock = threading.Lock()
        self._oai_cache: dict[str, dict] = {
            "identify": {},
            "metadata_prefixes": {},
            "sets": {},
        }

    def configure_bp(self, bp: Blueprint, *args, **kwargs) -> None:
        @bp.route("/secret-key", methods=["GET"])
        def secret_key():
            """Returns 200 if environment variable `SECRET_KEY` is set."""
            if self.config.SECRET_KEY_OK:
                return Response("OK", mimetype="text/plain", status=200)
            return Response("Unavailable", mimetype="text/plain", status=404)

        self._add_build_info_endpoint(bp)
        self._add_welcome_endpoint(bp)
        self._add_oai_endpoints(bp)

    def _add_build_info_endpoint(self, bp: Blueprint):
        @bp.route("/build-info", methods=["GET"])
        def build_info():
            """Returns available build-info."""
            return jsonify(
                version=BuildInfo.VERSION,
                datetime=BuildInfo.BUILD_DATETIME.isoformat(),
            ), 200

    def _add_welcome_endpoint(self, bp: Blueprint):
        @bp.route("/welcome", methods=["GET"])
        @login_required
        def welcome():
            """Returns formatted welcome-message."""
            return Response(self._welcome, mimetype="text/html", status=200)

    def _handle_oai_request(
        self, cache_id: str, handler: Callable[[RepositoryInterface], Any]
    ) -> Response:
        """
        Handle oai-request. Requires base url of oai-server as arg
        'url'.

        Keyword arguments:
        cache_id -- name of the relevant cache in `self._oai_cache`
        handler -- specifics for processing request, should accept
                   `RepositoryInterface`; return value will be cached

        Query Parameters:
        no-cache -- ignore any cache values
        """
        # validate request
        if "url" not in request.args:
            return Response(
                "Missing url.", mimetype="text/plain", status=400
            )

        # check for cached value if applicable
        request_url = request.args["url"]
        try:
            if (
                request_url not in self._oai_cache[cache_id]
                or "no-cache" in request.args
            ):
                result = handler(
                    RepositoryInterface(
                        base_url=request_url, timeout=self.config.OAI_TIMEOUT
                    )
                )
                with self._cache_lock:
                    self._oai_cache[cache_id][request_url] = result
            return (
                jsonify(self._oai_cache[cache_id][request_url]),
                200,
            )
        except requests.exceptions.ReadTimeout as exc_info:
            return Response(
                "Failed to receive a timely response from "
                + f"'{request_url}': {exc_info}",
                mimetype="text/plain",
                status=504,
            )
        # pylint: disable=broad-exception-caught
        except Exception as exc_info:
            return Response(
                f"Unable to connect: {exc_info}",
                mimetype="text/plain",
                status=502,
            )

    def _add_oai_endpoints(self, bp: Blueprint) -> None:
        @bp.route("/oai/cache", methods=["DELETE"])
        @login_required
        @requires_permission(
           *(self.config.ACL.CREATE_TEMPLATE + self.config.ACL.MODIFY_TEMPLATE)
        )
        def clear_cache():
            """Clear all oai-caches."""
            with self._cache_lock:
                for cache in self._oai_cache.values():
                    cache.clear()
            return Response("OK", mimetype="text/plain", status=200)

        @bp.route("/oai/identify", methods=["GET"])
        @login_required
        @requires_permission(
           *(self.config.ACL.CREATE_TEMPLATE + self.config.ACL.MODIFY_TEMPLATE)
        )
        def oai_identify():
            """
            If successful, returns oai-Identify response as JSON. See
            also description of `_handle_oai_request`.
            """
            return self._handle_oai_request(
                "identify", lambda interface: interface.identify()
            )

        @bp.route("/oai/metadata-prefixes", methods=["GET"])
        @login_required
        @requires_permission(
           *(self.config.ACL.CREATE_TEMPLATE + self.config.ACL.MODIFY_TEMPLATE)
        )
        def oai_metadata_prefixes():
            """
            If successful, returns prefixes from oai-ListMetadataFormats
            response as JSON-array. See also description of
            `_handle_oai_request`.
            """
            return self._handle_oai_request(
                "metadata_prefixes",
                lambda interface: interface.list_metadata_prefixes(),
            )

        @bp.route("/oai/sets", methods=["GET"])
        @login_required
        @requires_permission(
            *(
                self.config.ACL.CREATE_JOBCONFIG
                + self.config.ACL.MODIFY_JOBCONFIG
            )
        )
        def oai_sets():
            """
            If successful, returns a list with the configuration of sets
            in an oai-repository. See also description of
            `_handle_oai_request`.
            """
            def handler(interface: RepositoryInterface) -> list[str]:
                """Collects sets."""
                sets = []
                token = None
                tokens_count = 0
                while True:
                    sets_, token = interface.list_sets(_resumption_token=token)
                    sets.extend(sets_)
                    if token is None:
                        break
                    tokens_count += 1
                    if tokens_count > self.config.OAI_MAX_RESUMPTION_TOKENS:
                        raise TimeoutError(
                            "Maxium number of resumption tokens exceeded "
                            + f"({self.config.OAI_MAX_RESUMPTION_TOKENS}])."
                        )
                return sets

            return self._handle_oai_request("sets", handler)
